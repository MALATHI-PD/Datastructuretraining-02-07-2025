package datastructure;
class Que{
	int r=-1;
	int f=-1;
	int a[]=new int[5];


	public void enqueue(int data) {
		if(r==a.length-1) {
			System.out.println("Queue is already filled");
		}
		
	else if(r==-1 && f==-1) {
			r=0;
			f=0;
			a[r]=data;
		}
		else {
			r++;
			a[r]=data;
		}
		System.out.println("Inserted Element:"+a[r]);
	}
	public void dequeue() {
	
		if(r==-1 && f==-1) {
		System.out.println("Queue is Empty");	
		}
		else if(r==f){
			System.out.println("Deleted Element:"+a[r]);
			r=-1;
			f=-1;
		}
		else {
			System.out.println("Deleted Element:"+a[r]);
			r--;

		}
	}
	public void peek() {
		System.out.println("Peek Element:"+a[f]);
	}
	public void display() {
		if(r==-1 && f==-1) {
			System.out.println("Queue is Empty");	
			}
		else {
		
		for(int i=f;i<=r;i++) {
			System.out.println("Display Elements:"+a[i]);
		}
	}
	
}
	public void reverse() {
		for(int i=r;i>=f;i--) {
			System.out.println("Reverse:"+a[i]);
		}
	}
	public void spop() {
		if(r==-1 && f==-1) {
			System.out.println("Queue is Empty");
		}
		else {
			System.out.println("Pop like Stack:"+a[r]);
			r--;
		}
	}
}

public class Queue {
	public static void main(String args[]) {
		Que m=new Que();
		m.enqueue(10);
		m.enqueue(20);
		m.enqueue(30);
		m.enqueue(40);
		m.dequeue();
		m.display();
		m.peek();
		m.reverse();
		m.spop();
		m.spop();

	}

}
